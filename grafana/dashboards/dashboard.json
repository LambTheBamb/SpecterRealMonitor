{
  "id": null,
  "title": "Spectre Attack Monitoring Dashboard",
  "tags": ["spectre", "security", "performance"],
  "timezone": "browser",
  "refresh": "5s",
  "time": {
    "from": "now-30m",
    "to": "now"
  },
  "panels": [
    {
      "id": 1,
      "title": "CPU Clock",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 12, "x": 0, "y": 0 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"cpu-clock\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "ms" }
      }
    },
    {
      "id": 2,
      "title": "Task Clock",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 12, "x": 12, "y": 0 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"task-clock\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "ms" }
      }
    },
    {
      "id": 3,
      "title": "Context Switches",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 12, "x": 0, "y": 8 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"context-switches\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "short" }
      }
    },
    {
      "id": 4,
      "title": "Page Faults",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 12, "x": 12, "y": 8 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"page-faults\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "short" }
      }
    },
    {
      "id": 5,
      "title": "CPU Migrations",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 8, "x": 0, "y": 16 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"cpu-migrations\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "short" }
      }
    },
    {
      "id": 6,
      "title": "Major Page Faults",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 8, "x": 8, "y": 16 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"major-faults\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "short" }
      }
    },
    {
      "id": 7,
      "title": "Minor Page Faults",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 8, "x": 16, "y": 16 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"minor-faults\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "short" }
      }
    },
    {
      "id": 8,
      "title": "System Load Average",
      "type": "timeseries",
      "gridPos": { "h": 4, "w": 6, "x": 12, "y": 24 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"system_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] =~ /load_/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ]
    },
    {
      "id": 9,
      "title": "Memory Usage",
      "type": "timeseries",
      "gridPos": { "h": 4, "w": 6, "x": 18, "y": 24 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"system_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"memory_percent\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "unit": "percent", "min": 0, "max": 100 }
      }
    },
    {
      "collapsed": false,
      "gridPos": { "h": 1, "w": 24, "x": 0, "y": 28 },
      "id": 21,
      "panels": [],
      "title": "Anomaly Details (Divided Tables)",
      "type": "row"
    },
    {
      "id": 22,
      "title": "Context Switch Anomalies",
      "type": "table",
      "gridPos": { "h": 7, "w": 12, "x": 0, "y": 29 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"spectre_anomalies\")\n  |> filter(fn: (r) => r.metric == \"context-switches\")\n  |> pivot(rowKey:[\"_time\", \"severity\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> sort(columns: [\"_time\"], desc: true)"
        }
      ],
      "transformations": [
        {
          "id": "organize",
          "options": {
            "renameByName": {
              "_time": "Time",
              "baseline_mean": "Baseline Mean",
              "current_value": "Current Value",
              "z_score": "Z-Score",
              "severity": "Severity"
            }
          }
        }
      ]
    },
    {
      "id": 23,
      "title": "Page Fault Anomalies",
      "type": "table",
      "gridPos": { "h": 7, "w": 12, "x": 12, "y": 29 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"spectre_anomalies\")\n  |> filter(fn: (r) => r.metric == \"page-faults\")\n  |> pivot(rowKey:[\"_time\", \"severity\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> sort(columns: [\"_time\"], desc: true)"
        }
      ],
      "transformations": [
        {
          "id": "organize",
          "options": {
            "renameByName": {
              "_time": "Time",
              "baseline_mean": "Baseline Mean",
              "current_value": "Current Value",
              "z_score": "Z-Score",
              "severity": "Severity"
            }
          }
        }
      ]
    },
    {
      "id": 24,
      "title": "Cache Miss Anomalies",
      "type": "table",
      "gridPos": { "h": 7, "w": 12, "x": 0, "y": 36 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"spectre_anomalies\")\n  |> filter(fn: (r) => r.metric == \"cache-misses\")\n  |> pivot(rowKey:[\"_time\", \"severity\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> sort(columns: [\"_time\"], desc: true)"
        }
      ],
      "transformations": [
        {
          "id": "organize",
          "options": {
            "renameByName": {
              "_time": "Time",
              "baseline_mean": "Baseline Mean",
              "current_value": "Current Value",
              "z_score": "Z-Score",
              "severity": "Severity"
            }
          }
        }
      ]
    },
    {
      "id": 25,
      "title": "Branch Misprediction Anomalies",
      "type": "table",
      "gridPos": { "h": 7, "w": 12, "x": 12, "y": 36 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"spectre_anomalies\")\n  |> filter(fn: (r) => r.metric == \"branch-misses\")\n  |> pivot(rowKey:[\"_time\", \"severity\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> sort(columns: [\"_time\"], desc: true)"
        }
      ],
      "transformations": [
        {
          "id": "organize",
          "options": {
            "renameByName": {
              "_time": "Time",
              "baseline_mean": "Baseline Mean",
              "current_value": "Current Value",
              "z_score": "Z-Score",
              "severity": "Severity"
            }
          }
        }
      ]
    },
    {
      "collapsed": true,
      "gridPos": { "h": 1, "w": 24, "x": 0, "y": 43 },
      "id": 26,
      "panels": [],
      "title": "Anomaly Details (Combined Table - Previous Version)",
      "type": "row"
    },
    {
      "id": 27,
      "title": "Recent Anomalies Table (Combined)",
      "type": "table",
      "gridPos": { "h": 8, "w": 24, "x": 0, "y": 44 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_anomalies\")\n  |> pivot(\n      rowKey:[\"_time\", \"metric\", \"severity\"],\n      columnKey: [\"_field\"],\n      valueColumn: \"_value\"\n    )\n  |> sort(columns: [\"_time\"], desc: true)\n  |> limit(n: 100)"
        }
      ],
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {},
            "renameByName": {
              "_time": "Time",
              "metric": "Metric",
              "baseline_mean": "Baseline Mean",
              "current_value": "Current Value",
              "z_score": "Z-Score",
              "severity": "Severity"
            }
          }
        }
      ]
    },
    {
      "id": 11,
      "title": "TLB Miss Patterns",
      "type": "timeseries",
      "gridPos": { "h": 6, "w": 12, "x": 0, "y": 52 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"dTLB-load-misses\" or r[\"metric_name\"] == \"iTLB-load-misses\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ]
    },
    {
      "id": 12,
      "title": "Frontend/Backend Stalls",
      "type": "timeseries",
      "gridPos": { "h": 6, "w": 12, "x": 12, "y": 52 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"stalled-cycles-frontend\" or r[\"metric_name\"] == \"stalled-cycles-backend\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ]
    },
    {
      "id": 13,
      "title": "CPU Cycles & Stall Events",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 24, "x": 0, "y": 58 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => \n      r[\"metric_name\"] == \"sched_sched_stat_iowait\" or\n      r[\"metric_name\"] == \"cycles\" or\n      r[\"metric_name\"] == \"instructions\" or\n      r[\"metric_name\"] == \"stalled-cycles-frontend\" or\n      r[\"metric_name\"] == \"stalled-cycles-backend\"\n  )\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "short" }
      }
    },
    {
      "id": 14,
      "title": "Cache Miss Patterns (Spectre Indicator)",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 12, "x": 0, "y": 66 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"cache-misses\" or r[\"metric_name\"] == \"LLC-load-misses\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": { "mode": "palette-classic" },
          "unit": "short",
          "thresholds": {
            "steps": [
              { "color": "green", "value": null },
              { "color": "yellow", "value": 1000 },
              { "color": "red", "value": 5000 }
            ]
          }
        }
      }
    },
    {
      "id": 15,
      "title": "L3 Cache Misses (MEM_LOAD_RETIRED.L3_MISS)",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 12, "x": 12, "y": 66 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"mem_load_retired.l3_miss\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "short" }
      }
    },
    {
      "id": 16,
      "title": "Branch Misprediction Patterns",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 12, "x": 0, "y": 74 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"branch-misses\" or r[\"metric_name\"] == \"br_misp_retired.all_branches\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ]
    },
    {
      "id": 17,
      "title": "Speculative Execution Anomalies",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 12, "x": 12, "y": 74 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"uops_retired.retire_slots\" or r[\"metric_name\"] == \"machine_clears.count\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ],
      "fieldConfig": {
        "defaults": { "color": { "mode": "palette-classic" }, "unit": "short" }
      }
    },
    {
      "id": 18,
      "title": "Memory Load Latency Distribution",
      "type": "timeseries",
      "gridPos": { "h": 8, "w": 24, "x": 0, "y": 82 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] =~ /mem_trans_retired\\.load_latency_gt_/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)"
        }
      ]
    },
    {
      "id": 19,
      "title": "Anomaly Detection Status",
      "type": "stat",
      "gridPos": { "h": 4, "w": 6, "x": 0, "y": 90 },
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_anomalies\")\n  |> count()"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "color": { "mode": "thresholds" },
          "thresholds": {
            "steps": [
              { "color": "green", "value": null },
              { "color": "yellow", "value": 1 },
              { "color": "red", "value": 5 }
            ]
          }
        }
      }
    },
    {
      "id": 20,
      "title": "Cache Hit/Miss Ratio",
      "type": "gauge",
      "gridPos": { "h": 4, "w": 6, "x": 6, "y": 90 },
      "targets": [
        {
          "refId": "A",
          "query": "cache_hits = from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"cache-references\")\n  |> last()\n\ncache_misses = from(bucket: \"spectre-metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_metrics\")\n  |> filter(fn: (r) => r[\"metric_name\"] == \"cache-misses\")\n  |> last()\n\nunion(tables: [cache_hits, cache_misses])\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"metric_name\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({r with hit_ratio: (r[\"cache-references\"] - r[\"cache-misses\"]) / r[\"cache-references\"] * 100.0}))\n  |> keep(columns: [\"_time\", \"hit_ratio\"])"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "min": 0,
          "max": 100,
          "unit": "percent",
          "thresholds": {
            "steps": [
              { "color": "red", "value": null },
              { "color": "yellow", "value": 80 },
              { "color": "green", "value": 95 }
            ]
          }
        }
      }
    }
  ],
  "templating": { "list": [] },
  "annotations": {
    "list": [
      {
        "name": "Anomaly Alerts",
        "datasource": "InfluxDB",
        "enable": true,
        "iconColor": "red",
        "query": "from(bucket: \"spectre-metrics\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"spectre_anomalies\" and r[\"severity\"] == \"high\")"
      }
    ]
  }
}
